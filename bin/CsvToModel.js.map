{"version":3,"sources":["CsvToModel.es6"],"names":[],"mappings":"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","file":"CsvToModel.js","sourcesContent":["/************************************************************************\n *  PROJECT: csv-parse-model\n *  CREATED ON: 08.10.15 16:51\n *  AUTHOR: Michael\n ************************************************************************/\nimport Promise from 'bluebird';\nimport _ from 'lodash';\nimport _fs from 'fs';\nconst fs = Promise.promisifyAll(_fs);\nimport {NotFoundError, ModelNotFoundError, NoInputFile} from './../Exceptions/ExceptionsMain';\nimport Stream from 'stream';\nconst liner = new Stream.Transform({objectMode: true});\n\nexport default class Csv2Model {\n    constructor(options = {}) {\n        this.file = options.file;\n        this.options = Object.assign({\n            separator: '\\t',\n            lineEnding: '\\n',\n            enclosedBy: '\\\"',\n            encoding: 'utf8',\n            ignoreLines: 1\n        }, options);\n\n        this.options._separator = JSON.stringify(options.separator);\n    }\n\n    parse(obj = {}) {\n        return Promise.resolve(this.options.firstLine\n            .split(obj.separator || this.options.separator)\n            .map(val => val.trim()))\n            .then(firstLine => {\n                let result = new Map(),\n                    length = firstLine.length,\n                    insertMap = new Map(),\n                    setSet = new Set();\n                obj.columns = obj.columns || this.options.columns;\n                Object.keys(obj.columns)\n                    .filter(key => (obj.columns[key].find || obj.columns[key].defaultValue))\n                    .forEach(val => {\n                        let options = obj.columns[val];\n                        options.name = val;\n                        options.shouldVariable = '';\n                        if (options.find && ! ~ firstLine.indexOf(options.find) && options.alias instanceof Array) {\n                            let x = 0;\n                            options.find = options.alias.some((alias, i) => {\n                                x = i;\n                                return ~ firstLine.indexOf(alias)\n                            }) ? options.alias[x] : false;\n                            // if nothing is found in find and alias, throw\n                            if (! options.find) {\n                                throw new NotFoundError(val + ' has no finder');\n                            }\n                        }\n                        if (~ firstLine.indexOf(options.find)) {\n                            options.indexes = firstLine.indexOf(options.find);\n                            options.shouldVariable = options.valueOptions ? '@' : '';\n                            if (options.valueOptions) {\n                                setSet.add(options.shouldVariable + val);\n                            }\n                            insertMap.set(options.indexes, options.shouldVariable + val);\n                        } else {\n                            if (! options.find) {\n                                if (! options.defaultValue) throw new NotFoundError('No index found for ' + options.find);\n                                options.addSet = val;\n                                setSet.add(options.shouldVariable + val);\n                            }\n                        }\n\n                        result.set(options.shouldVariable + val, options);\n                    });\n                return [result, insertMap, setSet, length];\n            }).spread((res, inserts, sets, length) => {\n                let insertsMap = new Map(),\n                    columnsString,\n                    setsString = '';\n                for (let [i,field] of this.makeQueryDummy(0, length, 1)) {\n                    insertsMap.set(i, inserts.has(i) ? inserts.get(i) : field);\n                }\n                columnsString = Array.from(insertsMap.values())\n                    .toString().replace(/(,@dummy)+$/, '');\n\n                for (let key of sets.keys()) {\n                    setsString += key.replace('@', '') + '=' +\n                        (res.get(key).defaultValue ?\n                        '\"' + (res.get(key).defaultValue + '\", ') :\n                        (Object.keys(res.get(key).valueOptions)[0] + '(' + res.get(key).valueOptions[Object.keys(res.get(key).valueOptions)[0]]).replace(/(:\\w+)/, key) + '), ');\n                }\n                setsString = setsString.replace(/(, )+$/, '');\n                if (! obj.createLoadString) {\n                    return [columnsString, setsString];\n                }\n                obj = Object.assign(obj, this.options);\n                return this.loadDataInfileString(obj.file, columnsString, setsString, obj)\n            });\n        /* .catch(NotFoundError, err => log(err))\n         .catch(ModelNotFoundError, err => log(err))\n         .catch(NoInputFile, err => log(err))\n         .catch(Error, err => log(err))*/\n    }\n\n    read(groupBy = false, options = {}) {\n        options = Object.assign({\n            separator: this.options.separator,\n            lineEnding: this.options.lineEnding,\n            enclosedBy: this.options.enclosedBy,\n            encoding: this.options.encoding,\n            ignoreLines: this.options.ignoreLines,\n            file: this.file,\n            columns: this.options.columns\n        }, options);\n        let deferred = Promise.pending();\n        Promise.all([\n            fs.createReadStream(options.file, options.encoding),\n            this.options.firstLine\n                .split(options.separator)\n                .map(val => val.trim()),\n            Object.keys(options.columns)\n                .filter(val => (options.columns[val].find || options.columns[val].defaultValue))\n        ])\n            .spread((file, firstLine, columns) => {\n                let result = [];\n                liner._transform = function (chunk, encoding, done) {\n                    let data = chunk.toString();\n                    if (this._lastLineData) data = this._lastLineData + data;\n                    let lines = data.split(options.lineEnding);\n                    this._lastLineData = lines.splice(lines.length - 1, 1)[0];\n                    lines.forEach(this.push.bind(this));\n                    done()\n                };\n                liner._flush = function (done) {\n                    if (this._lastLineData) this.push(this._lastLineData);\n                    this._lastLineData = null;\n                    done();\n                };\n                file.pipe(liner);\n                let i = 0;\n                liner.on('readable', () => {\n                    let line,\n                        data = {};\n                    while (line = liner.read()) {\n                        let fields = line.trim().split(options.separator);\n                        columns.forEach(val => {\n                            let column = options.columns[val];\n                            if (column.find) {\n                                let index = firstLine.indexOf(column.find);\n                                data[val] = fields[index];\n                            }\n                            if (column.defaultValue) {\n                                data[val] = column.defaultValue;\n                            }\n                        });\n                        result.push(data);\n                        i ++;\n                    }\n                });\n                liner.on('end', () => {\n                    result.shift();\n                    if (groupBy && 'string' === typeof groupBy) {\n                        return deferred.resolve(_.groupBy(result, object => {\n                            return object[groupBy];\n                        }));\n                    }\n                    return deferred.resolve(result);\n                });\n            });\n        return deferred.promise;\n    }\n\n    *makeQueryDummy(start, end, step) {\n        while (start < end) {\n            yield [start, '@dummy'];\n            start += step;\n        }\n    }\n\n    loadDataInfileString(file, cs, ss, options = {}) {\n        options.separator = options.separator || this.options._separator;\n        options = Object.assign(this.options, options);\n\n        if (! options.table) throw new NotFoundError('No table selected');\n        return (`\n        LOAD DATA LOCAL INFILE\n        \"${file}\"\n        INTO TABLE\n        \\`${options.table}\\`\n        CHARACTER SET ${options.encoding || this.options.encoding}\n        ${options.separator ? ' FIELDS TERMINATED BY \\'' + options.separator + '\\'' : ' '}\n        ${options.enclosedBy ? ' ENCLOSED BY ' + options.enclosedBy : ' '  }\n        ${options.ignoreLines ? ' IGNORE ' + options.ignoreLines + ' LINES ' : ' '}\n        (${cs})` + (ss != '' ? ` SET ${ss}` : '')\n        ).replace(/\\s{2,}|\\n|\\r|\\t/g, ' ').trim();\n    }\n}\n\n "]}